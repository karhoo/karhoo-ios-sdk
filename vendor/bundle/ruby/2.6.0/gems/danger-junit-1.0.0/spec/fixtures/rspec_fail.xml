<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="rspec" tests="198" failures="1" errors="0" time="5.011841" timestamp="2016-07-29T22:35:59-04:00">
  <!-- Randomized with seed 58338 -->
  <properties/>
  <testcase classname="spec.lib.danger.ci_sources.buildkite_spec" name="Danger::CISource::Buildkite validates when buildkite all env vars is found" file="./spec/lib/danger/ci_sources/buildkite_spec.rb" time="0.000615"/>
  <testcase classname="spec.lib.danger.ci_sources.buildkite_spec" name="Danger::CISource::Buildkite doesnt validate when buildkite is not found" file="./spec/lib/danger/ci_sources/buildkite_spec.rb" time="0.000101"/>
  <testcase classname="spec.lib.danger.ci_sources.buildkite_spec" name="Danger::CISource::Buildkite gets out a repo slug from a git+ssh repo and pull request number" file="./spec/lib/danger/ci_sources/buildkite_spec.rb" time="0.000434"/>
  <testcase classname="spec.lib.danger.ci_sources.buildkite_spec" name="Danger::CISource::Buildkite gets out a repo slug from a https repo and pull request number" file="./spec/lib/danger/ci_sources/buildkite_spec.rb" time="0.000092"/>
  <testcase classname="spec.lib.danger.ci_sources.buildkite_spec" name="Danger::CISource::Buildkite doesn't continue when the build is not a pull request" file="./spec/lib/danger/ci_sources/buildkite_spec.rb" time="0.000093"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_api_spec" name="Danger::CircleAPI has a nil token as default" file="./spec/lib/danger/ci_sources/circle_api_spec.rb" time="0.000777"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_api_spec" name="Danger::CircleAPI sets the token on initialize" file="./spec/lib/danger/ci_sources/circle_api_spec.rb" time="0.000556"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_api_spec" name="Danger::CircleAPI creates a client with the correct base url" file="./spec/lib/danger/ci_sources/circle_api_spec.rb" time="0.001173"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_api_spec" name="Danger::CircleAPI fetches the build info without token" file="./spec/lib/danger/ci_sources/circle_api_spec.rb" time="0.008119"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_api_spec" name="Danger::CircleAPI fetches the build info with token" file="./spec/lib/danger/ci_sources/circle_api_spec.rb" time="0.001708"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_spec" name="Danger::CISource::CircleCI validates when circle all env vars are set" file="./spec/lib/danger/ci_sources/circle_spec.rb" time="0.012097">
    <failure message="&#10;expected true&#10;     got false&#10;" type="RSpec::Expectations::ExpectationNotMetError">
      <![CDATA[
expected true
     got false

./spec/lib/danger/ci_sources/circle_spec.rb:9:in `block (2 levels) in <top (required)>']]>
    </failure>
  </testcase>
  <testcase classname="spec.lib.danger.ci_sources.circle_spec" name="Danger::CISource::CircleCI validates when circle env var is found and it has a bad PR url" file="./spec/lib/danger/ci_sources/circle_spec.rb" time="0.000123"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_spec" name="Danger::CISource::CircleCI doesnt get a PR id when it has a bad PR url" file="./spec/lib/danger/ci_sources/circle_spec.rb" time="0.009942"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_spec" name="Danger::CISource::CircleCI does validate when circle env var is found and it has no PR url" file="./spec/lib/danger/ci_sources/circle_spec.rb" time="0.000178"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_spec" name="Danger::CISource::CircleCI doesnt validate when circle ci is not found" file="./spec/lib/danger/ci_sources/circle_spec.rb" time="0.000171"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_spec" name="Danger::CISource::CircleCI gets out a repo slug and pull request number" file="./spec/lib/danger/ci_sources/circle_spec.rb" time="0.009745"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_spec" name="Danger::CISource::CircleCI gets out a repo slug, pull request number and commit refs when PR url is not found" file="./spec/lib/danger/ci_sources/circle_spec.rb" time="0.010840"/>
  <testcase classname="spec.lib.danger.ci_sources.circle_spec" name="Danger::CISource::CircleCI uses Circle CI API token if available" file="./spec/lib/danger/ci_sources/circle_spec.rb" time="0.010527"/>
  <testcase classname="spec.lib.danger.ci_sources.drone_spec" name="Danger::CISource::Drone validates when DRONE variable is set" file="./spec/lib/danger/ci_sources/drone_spec.rb" time="0.000158"/>
  <testcase classname="spec.lib.danger.ci_sources.drone_spec" name="Danger::CISource::Drone does not validate when DRONE is not set" file="./spec/lib/danger/ci_sources/drone_spec.rb" time="0.000130"/>
  <testcase classname="spec.lib.danger.ci_sources.drone_spec" name="Danger::CISource::Drone does not validate when DRONE_PULL_REQUEST is set to non int value" file="./spec/lib/danger/ci_sources/drone_spec.rb" time="0.000095"/>
  <testcase classname="spec.lib.danger.ci_sources.drone_spec" name="Danger::CISource::Drone does not validate when DRONE_PULL_REQUEST is set to non positive int value" file="./spec/lib/danger/ci_sources/drone_spec.rb" time="0.000095"/>
  <testcase classname="spec.lib.danger.ci_sources.drone_spec" name="Danger::CISource::Drone gets the pull request ID" file="./spec/lib/danger/ci_sources/drone_spec.rb" time="0.009901"/>
  <testcase classname="spec.lib.danger.ci_sources.drone_spec" name="Danger::CISource::Drone gets the repo address" file="./spec/lib/danger/ci_sources/drone_spec.rb" time="0.009159"/>
  <testcase classname="spec.lib.danger.ci_sources.drone_spec" name="Danger::CISource::Drone gets out a repo slug and pull request number" file="./spec/lib/danger/ci_sources/drone_spec.rb" time="0.009046"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo Return Types #modified_files returns a FileList object" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.119790"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo Return Types #added_files returns a FileList object" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.119031"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo Return Types #deleted_files returns a FileList object" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.119663"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo with files handles adding a new file to a git repo" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.139138"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo with files handles file deletions as expected" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.141349"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo with files handles modified as expected" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.123373"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo lines of code handles code insertions as expected" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.139651"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo lines of code handles code deletions as expected" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.121049"/>
  <testcase classname="spec.lib.danger.ci_sources.git_spec" name="Danger::GitRepo lines of code #commits returns the commits" file="./spec/lib/danger/ci_sources/git_spec.rb" time="0.124938"/>
  <testcase classname="spec.lib.danger.ci_sources.jenkins_spec" name="Danger::CISource::Jenkins validates when jenkins env var is found" file="./spec/lib/danger/ci_sources/jenkins_spec.rb" time="0.000158"/>
  <testcase classname="spec.lib.danger.ci_sources.jenkins_spec" name="Danger::CISource::Jenkins doesnt validate when jenkins is not found" file="./spec/lib/danger/ci_sources/jenkins_spec.rb" time="0.000108"/>
  <testcase classname="spec.lib.danger.ci_sources.jenkins_spec" name="Danger::CISource::Jenkins gets out a repo slug from a git+ssh repo and pull request number" file="./spec/lib/danger/ci_sources/jenkins_spec.rb" time="0.000181"/>
  <testcase classname="spec.lib.danger.ci_sources.jenkins_spec" name="Danger::CISource::Jenkins gets out a repo slug from a https repo and pull request number" file="./spec/lib/danger/ci_sources/jenkins_spec.rb" time="0.000108"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo validates when run by danger local" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.000130"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo doesnt validate when the local git flag is missing" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.000092"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo gets the pull request ID" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.157652"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo github repos gets the repo address when it uses https" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.183226"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo github repos gets the repo address when it uses git@" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.185604"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo github repos gets the repo address when it contains .git" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.166616"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo github repos gets the repo address when it starts with git://" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.162419"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo github repos gets the repo address when it starts with git://git@" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.170272"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo github repos does not set a repo_slug if the repo has a non-gh remote" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.175726"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo enterprise github repos does set a repo_slug if provided with a github_host" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.179338"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo enterprise github repos does not set a repo_slug if provided with a github_host that is different from the remote" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.173431"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo Support looking for a specific PR handles finding the resulting PR" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.258028"/>
  <testcase classname="spec.lib.danger.ci_sources.local_git_repo_spec" name="Danger::CISource::LocalGitRepo Support looking for a specific PR handles not finding the resulting PR" file="./spec/lib/danger/ci_sources/local_git_repo_spec.rb" time="0.260599"/>
  <testcase classname="spec.lib.danger.ci_sources.semaphore_spec" name="Danger::CISource::Semaphore validates when all semaphore variables are set" file="./spec/lib/danger/ci_sources/semaphore_spec.rb" time="0.000167"/>
  <testcase classname="spec.lib.danger.ci_sources.semaphore_spec" name="Danger::CISource::Semaphore doesnt validate when not semaphore" file="./spec/lib/danger/ci_sources/semaphore_spec.rb" time="0.000105"/>
  <testcase classname="spec.lib.danger.ci_sources.semaphore_spec" name="Danger::CISource::Semaphore gets the pull request ID" file="./spec/lib/danger/ci_sources/semaphore_spec.rb" time="0.011314"/>
  <testcase classname="spec.lib.danger.ci_sources.semaphore_spec" name="Danger::CISource::Semaphore gets the repo address" file="./spec/lib/danger/ci_sources/semaphore_spec.rb" time="0.018653"/>
  <testcase classname="spec.lib.danger.ci_sources.semaphore_spec" name="Danger::CISource::Semaphore gets out a repo slug and pull request number" file="./spec/lib/danger/ci_sources/semaphore_spec.rb" time="0.009765"/>
  <testcase classname="spec.lib.danger.ci_sources.surf_spec" name="Danger::CISource::Surf validates when all Surf environment vars are set" file="./spec/lib/danger/ci_sources/surf_spec.rb" time="0.000321"/>
  <testcase classname="spec.lib.danger.ci_sources.surf_spec" name="Danger::CISource::Surf doesnt validate when Surf aint around" file="./spec/lib/danger/ci_sources/surf_spec.rb" time="0.000119"/>
  <testcase classname="spec.lib.danger.ci_sources.surf_spec" name="Danger::CISource::Surf gets the pull request ID" file="./spec/lib/danger/ci_sources/surf_spec.rb" time="0.000105"/>
  <testcase classname="spec.lib.danger.ci_sources.surf_spec" name="Danger::CISource::Surf gets the repo address" file="./spec/lib/danger/ci_sources/surf_spec.rb" time="0.000091"/>
  <testcase classname="spec.lib.danger.ci_sources.surf_spec" name="Danger::CISource::Surf gets out a repo slug and pull request number" file="./spec/lib/danger/ci_sources/surf_spec.rb" time="0.000088"/>
  <testcase classname="spec.lib.danger.ci_sources.teamcity_spec" name="Danger::CISource::TeamCity detects TeamCity" file="./spec/lib/danger/ci_sources/teamcity_spec.rb" time="0.000095"/>
  <testcase classname="spec.lib.danger.ci_sources.teamcity_spec" name="Danger::CISource::TeamCity gets out a repo slug" file="./spec/lib/danger/ci_sources/teamcity_spec.rb" time="0.000090"/>
  <testcase classname="spec.lib.danger.ci_sources.teamcity_spec" name="Danger::CISource::TeamCity gets out a pull request id" file="./spec/lib/danger/ci_sources/teamcity_spec.rb" time="0.000079"/>
  <testcase classname="spec.lib.danger.ci_sources.teamcity_spec" name="Danger::CISource::TeamCity gets out a repo url" file="./spec/lib/danger/ci_sources/teamcity_spec.rb" time="0.000085"/>
  <testcase classname="spec.lib.danger.ci_sources.travis_spec" name="Danger::CISource::Travis validates when all Travis environment vars are set and Josh K says so" file="./spec/lib/danger/ci_sources/travis_spec.rb" time="0.000084"/>
  <testcase classname="spec.lib.danger.ci_sources.travis_spec" name="Danger::CISource::Travis doesnt validate when Josh K aint around" file="./spec/lib/danger/ci_sources/travis_spec.rb" time="0.000231"/>
  <testcase classname="spec.lib.danger.ci_sources.travis_spec" name="Danger::CISource::Travis gets the pull request ID" file="./spec/lib/danger/ci_sources/travis_spec.rb" time="0.009766"/>
  <testcase classname="spec.lib.danger.ci_sources.travis_spec" name="Danger::CISource::Travis gets the repo address" file="./spec/lib/danger/ci_sources/travis_spec.rb" time="0.009772"/>
  <testcase classname="spec.lib.danger.ci_sources.travis_spec" name="Danger::CISource::Travis gets out a repo slug and pull request number" file="./spec/lib/danger/ci_sources/travis_spec.rb" time="0.011389"/>
  <testcase classname="spec.lib.danger.ci_sources.xcode_server_spec" name="Danger::CISource::XcodeServer validates when Xcode Server has XCS_BOT_NAME env var" file="./spec/lib/danger/ci_sources/xcode_server_spec.rb" time="0.000169"/>
  <testcase classname="spec.lib.danger.ci_sources.xcode_server_spec" name="Danger::CISource::XcodeServer doesnt validate when Xcode Server does not have XCS_BOT_NAME env var" file="./spec/lib/danger/ci_sources/xcode_server_spec.rb" time="0.000129"/>
  <testcase classname="spec.lib.danger.ci_sources.xcode_server_spec" name="Danger::CISource::XcodeServer gets out a repo slug and a pull request number from a bot name" file="./spec/lib/danger/ci_sources/xcode_server_spec.rb" time="0.009770"/>
  <testcase classname="spec.lib.danger.commands.local_helpers.http_cache_spec" name="Danger::HTTPCache will default to a 300 second cache expiry" file="./spec/lib/danger/commands/local_helpers/http_cache_spec.rb" time="0.000468"/>
  <testcase classname="spec.lib.danger.commands.local_helpers.http_cache_spec" name="Danger::HTTPCache will allow setting a custom cache expiry" file="./spec/lib/danger/commands/local_helpers/http_cache_spec.rb" time="0.000137"/>
  <testcase classname="spec.lib.danger.commands.local_helpers.http_cache_spec" name="Danger::HTTPCache will open a previous file by default" file="./spec/lib/danger/commands/local_helpers/http_cache_spec.rb" time="0.001958"/>
  <testcase classname="spec.lib.danger.commands.local_helpers.http_cache_spec" name="Danger::HTTPCache will delete a previous file if told to" file="./spec/lib/danger/commands/local_helpers/http_cache_spec.rb" time="0.000765"/>
  <testcase classname="spec.lib.danger.commands.local_helpers.http_cache_spec" name="Danger::HTTPCache will honor the TTL when a read attempt is made" file="./spec/lib/danger/commands/local_helpers/http_cache_spec.rb" time="0.000699"/>
  <testcase classname="spec.lib.danger.commands.local_helpers.http_cache_spec" name="Danger::HTTPCache will delete a key" file="./spec/lib/danger/commands/local_helpers/http_cache_spec.rb" time="0.000645"/>
  <testcase classname="spec.lib.danger.commands.local_helpers.http_cache_spec" name="Danger::HTTPCache will write a key and timestamp" file="./spec/lib/danger/commands/local_helpers/http_cache_spec.rb" time="0.001539"/>
  <testcase classname="spec.lib.danger.commands.plugin_lint_spec" name="Danger::PluginLint runs the command" file="./spec/lib/danger/commands/plugin_lint_spec.rb" time="0.118521"/>
  <testcase classname="spec.lib.danger.commands.runner_spec" name="Danger::Runner runtime errors when no Dangerfile found" file="./spec/lib/danger/commands/runner_spec.rb" time="0.000022">
    <skipped/>
  </testcase>
  <testcase classname="spec.lib.danger.commands.runner_spec" name="Danger::Runner Calls Executor works without parameters" file="./spec/lib/danger/commands/runner_spec.rb" time="0.013847"/>
  <testcase classname="spec.lib.danger.commands.runner_spec" name="Danger::Runner full run gets through the whole command" file="./spec/lib/danger/commands/runner_spec.rb" time="0.000017">
    <skipped/>
  </testcase>
  <testcase classname="spec.lib.danger.commands.runner_spec" name="Danger::Runner full run handles an example dangerfile well" file="./spec/lib/danger/commands/runner_spec.rb" time="0.000009">
    <skipped/>
  </testcase>
  <testcase classname="spec.lib.danger.commands.runner_spec" name="Danger::Runner full run has the correct version" file="./spec/lib/danger/commands/runner_spec.rb" time="0.000008">
    <skipped/>
  </testcase>
  <testcase classname="spec.lib.danger.core_ext.file_list_spec" name="Danger::FileList#include? supports exact matches" file="./spec/lib/danger/core_ext/file_list_spec.rb" time="0.000166"/>
  <testcase classname="spec.lib.danger.core_ext.file_list_spec" name="Danger::FileList#include? supports * for wildcards" file="./spec/lib/danger/core_ext/file_list_spec.rb" time="0.000118"/>
  <testcase classname="spec.lib.danger.core_ext.file_list_spec" name="Danger::FileList#include? supports ? for single chars" file="./spec/lib/danger/core_ext/file_list_spec.rb" time="0.000167"/>
  <testcase classname="spec.lib.danger.core_ext.file_list_spec" name="Danger::FileList#include? returns false if nothing was found" file="./spec/lib/danger/core_ext/file_list_spec.rb" time="0.000157"/>
  <testcase classname="spec.lib.danger.core_ext.string_spec" name="String#danger_class converts properly" file="./spec/lib/danger/core_ext/string_spec.rb" time="0.000173"/>
  <testcase classname="spec.lib.danger.core_ext.string_spec" name="String#danger_pluralize returns '0 errors' when count = 0" file="./spec/lib/danger/core_ext/string_spec.rb" time="0.000074"/>
  <testcase classname="spec.lib.danger.core_ext.string_spec" name="String#danger_pluralize returns '1 error' when count = 1" file="./spec/lib/danger/core_ext/string_spec.rb" time="0.000097"/>
  <testcase classname="spec.lib.danger.core_ext.string_spec" name="String#danger_pluralize returns '2 errors' when count = 2" file="./spec/lib/danger/core_ext/string_spec.rb" time="0.000064"/>
  <testcase classname="spec.lib.danger.core_ext.string_spec" name="String#danger_underscore converts properly" file="./spec/lib/danger/core_ext/string_spec.rb" time="0.000136"/>
  <testcase classname="spec.lib.danger.danger_core.danger_spec" name="Danger has a version number" file="./spec/lib/danger/danger_core/danger_spec.rb" time="0.000077"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile keeps track of the original Dangerfile" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.026327"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile runs the ruby code inside the Dangerfile" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.023698"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile raises elegantly with bad ruby code inside the Dangerfile" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.019950"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile respects ignored violations" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.019849"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile#print_results Prints out 3 lists" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.020004"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile verbose outputs metadata when verbose" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.020254"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile verbose does not print metadata by default" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.019679"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile initializing plugins should add a plugin to the @plugins array" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.023388"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile initializing plugins should add an instance variable to the dangerfile" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.020668"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile printing verbose metadata exposes core attributes" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.018841"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile printing verbose metadata exposes no external attributes by default" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.019520"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile printing verbose metadata exposes plugin external attributes by default" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.019462"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile printing verbose metadata creates a table from a selection of core DSL attributes info" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.021840"/>
  <testcase classname="spec.lib.danger.danger_core.dangerfile_spec" name="Danger::Dangerfile printing verbose metadata creates a table from a selection of external plugins DSL attributes info" file="./spec/lib/danger/danger_core/dangerfile_spec.rb" time="0.022742"/>
  <testcase classname="spec.lib.danger.danger_core.environment_manager_spec" name="Danger::EnvironmentManager raises without enough info in the ENV" file="./spec/lib/danger/danger_core/environment_manager_spec.rb" time="0.000332"/>
  <testcase classname="spec.lib.danger.danger_core.environment_manager_spec" name="Danger::EnvironmentManager stores travis in the source" file="./spec/lib/danger/danger_core/environment_manager_spec.rb" time="0.019040"/>
  <testcase classname="spec.lib.danger.danger_core.environment_manager_spec" name="Danger::EnvironmentManager stores circle in the source" file="./spec/lib/danger/danger_core/environment_manager_spec.rb" time="0.019483"/>
  <testcase classname="spec.lib.danger.danger_core.environment_manager_spec" name="Danger::EnvironmentManager creates a GitHub attr" file="./spec/lib/danger/danger_core/environment_manager_spec.rb" time="0.018854"/>
  <testcase classname="spec.lib.danger.danger_core.environment_manager_spec" name="Danger::EnvironmentManager skips push runs and only runs for pull requests" file="./spec/lib/danger/danger_core/environment_manager_spec.rb" time="0.009527"/>
  <testcase classname="spec.lib.danger.import_spec" name="Danger::Dangerfile::DSL#import #import_local supports exact paths" file="./spec/lib/danger/import_spec.rb" time="0.019450"/>
  <testcase classname="spec.lib.danger.import_spec" name="Danger::Dangerfile::DSL#import #import_local supports file globbing" file="./spec/lib/danger/import_spec.rb" time="0.019218"/>
  <testcase classname="spec.lib.danger.import_spec" name="Danger::Dangerfile::DSL#import #import_local raises an error when calling a plugin that's not a subclass of Plugin" file="./spec/lib/danger/import_spec.rb" time="0.000016">
    <skipped/>
  </testcase>
  <testcase classname="spec.lib.danger.import_spec" name="Danger::Dangerfile::DSL#import #import_url downloads a remote .rb file" file="./spec/lib/danger/import_spec.rb" time="0.035795"/>
  <testcase classname="spec.lib.danger.import_spec" name="Danger::Dangerfile::DSL#import #import_url rejects unencrypted plugins" file="./spec/lib/danger/import_spec.rb" time="0.019916"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_linter_spec" name="Danger::PluginParser creates a set of errors for fixtured plugins" file="./spec/lib/danger/plugin_support/plugin_linter_spec.rb" time="0.012638"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_linter_spec" name="Danger::PluginParser creates a set of warnings for fixtured plugins" file="./spec/lib/danger/plugin_support/plugin_linter_spec.rb" time="0.007542"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_linter_spec" name="Danger::PluginParser fails when there are errors" file="./spec/lib/danger/plugin_support/plugin_linter_spec.rb" time="0.000148"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_linter_spec" name="Danger::PluginParser handles outputting a warning" file="./spec/lib/danger/plugin_support/plugin_linter_spec.rb" time="0.000643"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_parser_spec" name="Danger::PluginParser includes an example plugin" file="./spec/lib/danger/plugin_support/plugin_parser_spec.rb" time="0.005550"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_parser_spec" name="Danger::PluginParser finds classes from inside the file" file="./spec/lib/danger/plugin_support/plugin_parser_spec.rb" time="0.000521"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_parser_spec" name="Danger::PluginParser skips non-subclasses of Danger::Plugin" file="./spec/lib/danger/plugin_support/plugin_parser_spec.rb" time="0.000698"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_parser_spec" name="Danger::PluginParser find subclasses of Danger::Plugin" file="./spec/lib/danger/plugin_support/plugin_parser_spec.rb" time="0.005559"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_parser_spec" name="Danger::PluginParser outputs JSON for badly documented subclasses of Danger::Plugin" file="./spec/lib/danger/plugin_support/plugin_parser_spec.rb" time="0.002823"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_parser_spec" name="Danger::PluginParser outputs JSON for well documented subclasses of Danger::Plugin" file="./spec/lib/danger/plugin_support/plugin_parser_spec.rb" time="0.002275"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_parser_spec" name="Danger::PluginParser creates method descriptions that make sense" file="./spec/lib/danger/plugin_support/plugin_parser_spec.rb" time="0.002356"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_spec" name="Danger::Plugin creates an instance name based on the class name" file="./spec/lib/danger/plugin_support/plugin_spec.rb" time="0.000135"/>
  <testcase classname="spec.lib.danger.plugin_support.plugin_spec" name="Danger::Plugin should forward unknown method calls to the dangerfile" file="./spec/lib/danger/plugin_support/plugin_spec.rb" time="0.000131"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_git_plugin_spec" name="Danger::DangerfileGitPlugin fails init if the dangerfile's request source is not a GitRepo" file="./spec/lib/danger/plugins/dangerfile_git_plugin_spec.rb" time="0.019272"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_git_plugin_spec" name="Danger::DangerfileGitPlugin dsl gets added_files " file="./spec/lib/danger/plugins/dangerfile_git_plugin_spec.rb" time="0.019123"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_git_plugin_spec" name="Danger::DangerfileGitPlugin dsl gets deleted_files " file="./spec/lib/danger/plugins/dangerfile_git_plugin_spec.rb" time="0.019534"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_git_plugin_spec" name="Danger::DangerfileGitPlugin dsl gets modified_files " file="./spec/lib/danger/plugins/dangerfile_git_plugin_spec.rb" time="0.019308"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_git_plugin_spec" name="Danger::DangerfileGitPlugin dsl gets lines_of_code" file="./spec/lib/danger/plugins/dangerfile_git_plugin_spec.rb" time="0.019471"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_git_plugin_spec" name="Danger::DangerfileGitPlugin dsl gets deletions" file="./spec/lib/danger/plugins/dangerfile_git_plugin_spec.rb" time="0.019162"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_git_plugin_spec" name="Danger::DangerfileGitPlugin dsl gets insertions" file="./spec/lib/danger/plugins/dangerfile_git_plugin_spec.rb" time="0.019583"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_git_plugin_spec" name="Danger::DangerfileGitPlugin dsl gets commits" file="./spec/lib/danger/plugins/dangerfile_git_plugin_spec.rb" time="0.019610"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_github_plugin_spec" name="Danger::DangerfileGitHubPlugin dsl html_link works with a single path" file="./spec/lib/danger/plugins/dangerfile_github_plugin_spec.rb" time="0.020039"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_github_plugin_spec" name="Danger::DangerfileGitHubPlugin dsl html_link works with 2 paths" file="./spec/lib/danger/plugins/dangerfile_github_plugin_spec.rb" time="0.020277"/>
  <testcase classname="spec.lib.danger.plugins.dangerfile_github_plugin_spec" name="Danger::DangerfileGitHubPlugin dsl html_link works with 3+ paths" file="./spec/lib/danger/plugins/dangerfile_github_plugin_spec.rb" time="0.021214"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub the github host sets a default GitHub host" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.010746"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub the github host allows the GitHub host to be overridden" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.011149"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub the github host allows the GitHub API host to be overridden" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.010688"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response sets its pr_json" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.012208"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response sets its issue_json" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.011183"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response sets the ignored violations" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.012001"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #organisation valid value available" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.011404"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #organisation no valid value available doesn't crash" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.011446"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #fetch_repository works with valid data" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.011866"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #fetch_repository returns nil for no response" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.011571"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #fetch_danger_repo tries both 'danger' and 'Danger' as repo, 'Danger' first" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.012379"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #fetch_danger_repo tries both 'danger' and 'Danger' as repo, 'danger' first" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.012456"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #danger_repo? returns true if the repo's name is danger" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.013061"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #danger_repo? returns false if the repo's name is danger (it's eigen)" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014915"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #file_url returns a valid URL with the minimum parameters" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014187"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #file_url returns a valid URL with more parameters" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014144"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response DSL Attributes sets the right commit sha" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.000020">
    <skipped/>
  </testcase>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response DSL Attributes sets the right labels" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.000145">
    <skipped/>
  </testcase>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment no warnings, no errors, no messages" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.017438"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment supports markdown code below the summary table" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.016031"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment supports markdown only without a table" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.017957"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment some warnings, no errors" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014481"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment some warnings with markdown, no errors" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014330"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment a multiline warning with markdown, no errors" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014445"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment some warnings, some errors" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.013936"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment deduplicates previous violations" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.013562"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment crosses resolved violations and changes the title" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.022098"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment uncrosses violations that were on the list and happened again" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.015937"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment counts only unresolved violations on the title" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.016114"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment needs to include generated_by_danger" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014817"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment handles a custom danger_id" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.015104"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment sets data-sticky to true when a violation is sticky" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014846"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response #generate_comment sets data-sticky to false when a violation is not sticky" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.015626"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response status message Shows a success message when no errors/warnings" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.015058"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response status message Shows an error messages when there are errors" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014958"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response status message Shows an error message when errors and warnings" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.012695"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response status message Deals with singualars in messages when errors and warnings" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.013660"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response commit status update fails when no head commit is set" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.013724"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response issue creation creates an issue if no danger comments exist" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.017320"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response issue creation updates the issue if no danger comments exist" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.016393"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response issue creation updates the issue if no danger comments exist and a custom danger_id is provided" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.017288"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response issue creation deletes existing issues if danger doesnt need to say anything" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.015273"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response issue creation deletes existing issues if danger doesnt need to say anything and a custom danger_id is provided" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.013320"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response issue creation updates the issue if danger doesnt need to say anything but there are sticky violations" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.016709"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response comment parsing detects the warning kind" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.014679"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response comment parsing detects the error kind" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.013618"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response comment parsing detects the warning kind" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.012670"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response comment parsing parses a comment with error" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.012958"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response comment parsing parses a comment with error and warnings" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.012461"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response comment parsing ignores non-sticky violations when parsing a comment" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.011339"/>
  <testcase classname="spec.lib.danger.request_sources.github_spec" name="Danger::RequestSources::GitHub valid server response comment parsing parses a comment with error and warnings removing strike tag" file="./spec/lib/danger/request_sources/github_spec.rb" time="0.011789"/>
  <testcase classname="spec.lib.danger.request_sources.request_source_spec" name="Danger::RequestSources::RequestSource the base request source validates when passed a corresponding repository" file="./spec/lib/danger/request_sources/request_source_spec.rb" time="0.010502"/>
  <testcase classname="spec.lib.danger.request_sources.request_source_spec" name="Danger::RequestSources::RequestSource the base request source validates when passed a corresponding repository with custom host" file="./spec/lib/danger/request_sources/request_source_spec.rb" time="0.010470"/>
  <testcase classname="spec.lib.danger.request_sources.request_source_spec" name="Danger::RequestSources::RequestSource the base request source doesn't validate when passed a wrong repository" file="./spec/lib/danger/request_sources/request_source_spec.rb" time="0.010371"/>
</testsuite>
